{"name": "test_row_comparison", "status": "failed", "statusDetails": {"message": "AssertionError: assert 1 == 0\n +  where 1 = len([('dbo', 'EmailLog', 66, 'EmailLogId', [1775388, 1778311, 1778312, 1778313, 1778314, 1778341, ...])])", "trace": "config_database = [(<pyodbc.Cursor object at 0x000001EDC1FEC9B0>, 'prod_Xvoucher_EmailLog', \"('guest', 'information_schema', 'sys')\", \"(...rver_ext_data')\", \"('__refactorlog', '@retval_recentactivity', '@tbl_split', '@values_csvintotable')\", \"('')\", \"('')\")]\n\n    @pytest.mark.usefixtures(\"config_database\")\n    def test_row_comparison(config_database):\n        config_database[0][0].execute(\n            \"\"\" SELECT T.TABLE_SCHEMA, T.TABLE_NAME, C.COLUMN_NAME FROM  INFORMATION_SCHEMA.TABLE_CONSTRAINTS T\n                JOIN INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE C ON C.CONSTRAINT_NAME=T.CONSTRAINT_NAME\n                WHERE T.CONSTRAINT_TYPE = 'PRIMARY KEY' AND T.TABLE_NAME NOT IN {}\n                ORDER BY T.TABLE_NAME;\n            \"\"\".format(config_database[0][3]))\n        pkColumnsSQLServer = config_database[0][0].fetchall()\n    \n        mismacthedRowTables = []\n        for table in pkColumnsSQLServer:\n            config_database[0][0].execute(\n                \"\"\" SELECT TOP(2000000) * FROM {}.{} ORDER BY {};\n                \"\"\".format(table[0], table[1], table[2]))\n            rowsSQLServer = config_database[0][0].fetchall()\n            config_database[1][0].execute(\n                \"\"\" SELECT * FROM {}.{} ORDER BY {} LIMIT 2000000;\n                \"\"\".format(table[0].lower(), table[1].lower(), table[2].lower()))\n            rowsPostgreSQL = config_database[1][0].fetchall()\n    \n            x = 0\n            mismatchedRowPks = []\n            mimatchedRowsCount = 0\n            while x<len(rowsSQLServer):\n                if list(rowsSQLServer[x]) != list(rowsPostgreSQL[x]):\n                    mismatchedRowPks.append(rowsSQLServer[x][0])\n                    mimatchedRowsCount = mimatchedRowsCount + 1\n                x = x + 1\n    \n            if mimatchedRowsCount != 0:\n                mismacthedRowTables.append((table[0], table[1], mimatchedRowsCount, table[2], mismatchedRowPks))\n    \n        for row in mismacthedRowTables:\n            print(row)\n    \n>       assert len(mismacthedRowTables) == 0\nE       AssertionError: assert 1 == 0\nE        +  where 1 = len([('dbo', 'EmailLog', 66, 'EmailLogId', [1775388, 1778311, 1778312, 1778313, 1778314, 1778341, ...])])\n\ntests\\test_data.py:40: AssertionError"}, "attachments": [{"name": "stdout", "source": "8c0184f3-180e-4874-bc83-e26c463e5374-attachment.txt", "type": "text/plain"}], "start": 1654007876576, "stop": 1654008048089, "uuid": "64a01ad8-2e18-4737-87b7-ed20a9eee91a", "historyId": "a5625512c9208f3c96ba0fa6ce06a407", "testCaseId": "39ac0615381ca3384e9b0ffca750e6e0", "fullName": "tests.test_data#test_row_comparison", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('config_database')"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_data"}, {"name": "host", "value": "EC2AMAZ-3T2RFVE"}, {"name": "thread", "value": "9068-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_data"}]}